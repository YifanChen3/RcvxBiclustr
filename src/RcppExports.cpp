// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// robustweights
NumericVector robustweights(NumericMatrix X, double delta, double zeta);
RcppExport SEXP _RcvxBiclustr_robustweights(SEXP XSEXP, SEXP deltaSEXP, SEXP zetaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< double >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< double >::type zeta(zetaSEXP);
    rcpp_result_gen = Rcpp::wrap(robustweights(X, delta, zeta));
    return rcpp_result_gen;
END_RCPP
}
// robust_convex_bicluster
List robust_convex_bicluster(arma::mat& X, arma::mat& W1, arma::mat& W2, arma::mat& V1, arma::mat& V2, arma::mat& Y1, arma::mat& Y2, arma::mat& Z1, arma::mat& Z2, arma::mat E1, arma::mat E2, int max_iter, double tol_abs, double lambda, double rho, arma::vec wt_row, arma::vec wt_col);
RcppExport SEXP _RcvxBiclustr_robust_convex_bicluster(SEXP XSEXP, SEXP W1SEXP, SEXP W2SEXP, SEXP V1SEXP, SEXP V2SEXP, SEXP Y1SEXP, SEXP Y2SEXP, SEXP Z1SEXP, SEXP Z2SEXP, SEXP E1SEXP, SEXP E2SEXP, SEXP max_iterSEXP, SEXP tol_absSEXP, SEXP lambdaSEXP, SEXP rhoSEXP, SEXP wt_rowSEXP, SEXP wt_colSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type W1(W1SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type W2(W2SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type V1(V1SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type V2(V2SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Y1(Y1SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Y2(Y2SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Z1(Z1SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Z2(Z2SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type E1(E1SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type E2(E2SEXP);
    Rcpp::traits::input_parameter< int >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< double >::type tol_abs(tol_absSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type wt_row(wt_rowSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type wt_col(wt_colSEXP);
    rcpp_result_gen = Rcpp::wrap(robust_convex_bicluster(X, W1, W2, V1, V2, Y1, Y2, Z1, Z2, E1, E2, max_iter, tol_abs, lambda, rho, wt_row, wt_col));
    return rcpp_result_gen;
END_RCPP
}
// robust_convex_bicluster_naive
List robust_convex_bicluster_naive(arma::mat& X, arma::mat& W1, arma::mat& W2, arma::mat& V1, arma::mat& V2, arma::mat& Y1, arma::mat& Y2, arma::mat& Z1, arma::mat& Z2, arma::mat E1, arma::mat E2, int max_iter, double tol_abs, double lambda, double rho, double tau, arma::vec wt_row, arma::vec wt_col);
RcppExport SEXP _RcvxBiclustr_robust_convex_bicluster_naive(SEXP XSEXP, SEXP W1SEXP, SEXP W2SEXP, SEXP V1SEXP, SEXP V2SEXP, SEXP Y1SEXP, SEXP Y2SEXP, SEXP Z1SEXP, SEXP Z2SEXP, SEXP E1SEXP, SEXP E2SEXP, SEXP max_iterSEXP, SEXP tol_absSEXP, SEXP lambdaSEXP, SEXP rhoSEXP, SEXP tauSEXP, SEXP wt_rowSEXP, SEXP wt_colSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type W1(W1SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type W2(W2SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type V1(V1SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type V2(V2SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Y1(Y1SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Y2(Y2SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Z1(Z1SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Z2(Z2SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type E1(E1SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type E2(E2SEXP);
    Rcpp::traits::input_parameter< int >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< double >::type tol_abs(tol_absSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type wt_row(wt_rowSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type wt_col(wt_colSEXP);
    rcpp_result_gen = Rcpp::wrap(robust_convex_bicluster_naive(X, W1, W2, V1, V2, Y1, Y2, Z1, Z2, E1, E2, max_iter, tol_abs, lambda, rho, tau, wt_row, wt_col));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_RcvxBiclustr_robustweights", (DL_FUNC) &_RcvxBiclustr_robustweights, 3},
    {"_RcvxBiclustr_robust_convex_bicluster", (DL_FUNC) &_RcvxBiclustr_robust_convex_bicluster, 17},
    {"_RcvxBiclustr_robust_convex_bicluster_naive", (DL_FUNC) &_RcvxBiclustr_robust_convex_bicluster_naive, 18},
    {NULL, NULL, 0}
};

RcppExport void R_init_RcvxBiclustr(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
